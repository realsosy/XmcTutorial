package Model.APPS.INTERRUPT.v4_0_8;

/*
Copyright (c) 2015, Infineon Technologies AG
All rights reserved.                       
                                           
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
following conditions are met:  
                                                                            
Redistributions of source code must retain the above copyright notice, this list of conditions and the following
disclaimer.                       
 
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided with the distribution.                      
 
Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
products derived from this software without specific prior written permission.                                          
                                                                            
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                                 
                                                                            
To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes with 
Infineon Technologies AG: dave@infineon.com. */

/*************** Revision History **********************************************
 Version      Date          Description //Retain this format

  4.0.0       16-Feb-2015   Initial version for DAVE v4
  4.0.1       20-Feb-2015   Documentation updated
  4.0.2       20-Apr-2015   XMC_ASSERT statements added in all CMSIS Wrapper APIs
  4.0.4       26-Jun-2015   Updated the APP description
  4.0.6       09-Oct-2015   Added support for XMC1400 and XMC4800.
  4.0.8       15-Dec-2015   Added support for XMC4300.
*******************************************************************************/
// Import statements
import ifx.davex.app.manifest.*

import java.util.regex.Matcher
import java.util.regex.Pattern
class  INTERRUPT extends INTERRUPT_GUI {

	// Note  : INTERRUPT properties are mandatory and important
	// Begin : INTERRUPT property section
	def version = '4.0.8'
	
	def categoriesDescription = ["System"]
	
	// Minimum DAVE version required for the App
	def minDaveVersion = '4.0.0'
	
	// Keywords to search in Apps selection view
	def keywords = [
		"NVIC",
        "ISR",
		"interrupt",
		"all"
	]
	
	def softwareIDs  = [
	                     "XMC4.8.*.*.*":"1.0.0",
		                 "XMC4.7.*.*.*":"1.0.0",
		                 "XMC4.5.*.*.*":"1.0.0",
		                 "XMC4.4.*.*.*":"1.0.0",
						 "XMC4.3.*.*.*":"1.0.0",
		                 "XMC4.2.*.*.*":"1.0.0",
		                 "XMC4.1.*.*.*":"1.0.0",
						 "XMC1.4.*.*.*":"1.0.0",
						 "XMC1.3.*.*.*":"1.0.0",
						 "XMC1.2.*.*.*":"1.0.0",
						 "XMC1.1.*.*.*":"1.0.0"
	                   ]

	def singleton     = false
	def initProvider  = true
	def deprecated    = false
	def sharable      = false
	def ioApp         = false

	def description = "Allows to overwrite the provided interrupt service routine (ISR) in system file \n and sets the interrupt priority"
	
	// End   : INTERRUPT property section
	
	// Begin : User variable section
		
	MRequiredApp appres_cpu
	MVirtualResourceGroup hwres_nvicnode
	
	MVirtualSignal vs_nvic_signal_in

	// End   : User variable section

	public INTERRUPT(DaveEnv daveEnv) {
		
		String family = daveEnv.project.selectedDevice.deviceId.family
		
		String fn_regexp = ~/^[^\d\W]\w*\Z/
		
		if(family == "XMC4")
		{
			appres_cpu =  MRequiredApp("CPU_CTRL_XMC4", "CPU", RSHARABLE, "4.0.2")
		}
		else if(family == "XMC1") 
		{
			ginterruptprio_priority.subPriorityVisible = false
			appres_cpu =  MRequiredApp("CPU_CTRL_XMC1", "CPU", RSHARABLE, "4.0.2")
		}

		/* assign the virtual resource group for nvic node */
		hwres_nvicnode = MVirtualResourceGroup("NVIC Node", ["peripheral", "cpu", "0", "nvic", "interrupt", "*"])
		
		/* assign the virtual resource group to virtual signal along with the signal */
		vs_nvic_signal_in = MVirtualSignal(hwres_nvicnode, "sr_irq", "signal_in")

		/* Warn if the isr name is not a valid name */
		gmessage_valid_isr_name.visible = MF({
			Matcher matcher = (gstring_handler.value =~ fn_regexp)
			Boolean ExpressionMatch = !matcher.matches()
			return ExpressionMatch
		}, Boolean)
		
		glabel_warning.visible = MF({hwres_nvicnode.getRegValue("", "iser_setena") == 0}, Boolean)
		
		/* Read maximum sub priority value from CPU APP. It is applicable only for XMC4 devices */
		if(family == "XMC4")
		{
			ginterruptprio_priority.priorityValue = 63
			ginterruptprio_priority.subPriorityValue = 0
			ginterruptprio_priority.maxSubPriority =  MF({
				                                Integer SubPriority = appres_cpu.getVal(["gint_maxInterruptSubPriority", "value"]) as Integer
				                                return SubPriority
			                                  }, Integer)
		}

		/* Set default priority value as 3 for XMC1 devices */
		else if(family == "XMC1")
		{
			ginterruptprio_priority.priorityValue = 3
			ginterruptprio_priority.subPriorityVisible = false
		}

		/* Read the maximum priority value from CPU APP */
		ginterruptprio_priority.maxPriority = MF({
			Integer Priority = appres_cpu.getVal(["gint_maxInterruptPreemptPriority", "value"]) as Integer
			return Priority
		}, Integer)
		
	}
	
	// File Generation
	def generateFiles(){
		copy("interrupt.c", "interrupt.c")
		copy("interrupt.h", "interrupt.h")
		generate("interrupt_confc.tmpl", "interrupt_conf.c")
		generate("interrupt_confh.tmpl", "interrupt_conf.h")
		generate("interrupt_externh.tmpl", "interrupt_extern.h")
	}
	
}
