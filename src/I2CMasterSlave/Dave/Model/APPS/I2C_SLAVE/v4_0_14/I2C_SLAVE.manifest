package Model.APPS.I2C_SLAVE.v4_0_14;

/*
 Copyright (c) 2015-2016, Infineon Technologies AG
 All rights reserved.
                      
 Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 following conditions are met:
                                       
 Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 disclaimer.
  
 Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 disclaimer in the documentation and/or other materials provided with the distribution.
  
 Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 products derived from this software without specific prior written permission.
                                       
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                       
 To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes with
 Infineon Technologies AG: dave@infineon.com. */
/*************** Revision History **********************************************
 Version        Date          Description
 
   4.0.2       09-Oct-2015   Initial version for DAVEv4<br>
   4.0.4       17-Dec-2015   Added support for XMC4300 device series.<br>
   4.0.6       10-Mar-2016   Documentation updated.<br>
   4.0.8       12-Apr-2016   Documentation updated.<br>
   4.0.10      25-Apr-2016   Documentation of pull up resistance added.<br>
   4.0.12      09-May-2016   Added output support for I2C SCL to enable clock stretching.<br>
   4.0.14      08-Jul-2016   1. Fixed incorrect case for an included header. <BR>
                             2. Pad signals are exposed to user for external connection with other APPs.<BR>
 *******************************************************************************/
// Import statements
import ifx.davex.app.manifest.*

import java.util.regex.Matcher

class  I2C_SLAVE extends I2C_SLAVE_GUI {

	 /* Note  : Following APP properties are mandatory and important */
	 
	 /* Begin : APP property section */
	
	/**
	 * APP version
	 * Format: a string with three digit separated by a dot.
	 */
	def version            = '4.0.14'
	
	/**
	 * APP categories declaration. 
	 * It is list of strings. Subcategories are separated by slash.
	 * No limits on number of categories and subcategories depth.
	 */
	def categoriesDescription = ["Communication/General Purpose"] 

	/** 
	 * Minimum DAVE version required for this APP.
	 * 
	 * It is string with three digit separated by a dot.
	 */
	def minDaveVersion           = '4.1.2'
	
	/** 
	 * Keywords used by search feature in APPs selection view
	 * 
	 * It is a list of string.
	 */
	def keywords      = ['I2C', 'USIC', 'serial', 'slave', 'I2C slave', 'ALL']
	
	/** 
	 * softwareIDs is used to declare which devices are compatible with this APP.
	 * It is a map with key a string containing a pattern that shall match the SW id of
	 * the device and as value the minimal version of the APP.
	 */
	
    /**
     * Any step of XMC4500F144 and XMC4400F144
	 * Any step of XMC4400F100 and XMC4400F64
	 * Any step, any variant and any packages of XMC1300
	 */
	def softwareIDs       = [
		"XMC4.1.*.*.*":"1.0.0",
		"XMC4.2.*.*.*":"1.0.0",
		"XMC4.3.*.*.*":"1.0.0",
		"XMC4.4.*.*.*":"1.0.0",
		"XMC4.5.*.*.*":"1.0.0",
		"XMC4.7.*.*.*":"1.0.0",
		"XMC4.8.*.*.*":"1.0.0",
		"XMC1.1.*.*.*":"1.0.0",
		"XMC1.2.*.*.*":"1.0.0",
		"XMC1.3.*.*.*":"1.0.0",
		"XMC1.4.*.*.*":"1.0.0"
		]
	
	/**
	 * Singleton property:
	 * When it is true the app can be instantiated only once. 
	 */
	def singleton     = false


	/**
	 * initProvider property
	 * It shall be true to add a call to <AppName>_Init() 
	 */
	def initProvider  = true
	
	/**
	 * Deprecated APP
	 * Set it to true to indicate that the app shall be not used for new projects.
	 */
	def deprecated    = false
	
	/**
	 * Sharable property.
	 * It shall be true to allows multiple APPs to require the same instance of this APP.
	 */
	def sharable      = false

	/**
	 *  APP function description.
	 */
	def description = "Configures a USIC channel to implement I2C slave functionality."
	
	/* End   : APP property section */
	
	/* Begin : User APP property section */
  GFloat gfloat_peripheralclock = GFloat(widgetName:"gfloat_peripheralclock")  /* To get the peripheral clock */
  MVirtualResourceGroup hwres_usic_channel
  MVirtualResourceGroup hwres_nvic_node_i2c_tx
  MVirtualResourceGroup hwres_nvic_node_i2c_rx
  MVirtualResourceGroup hwres_nvic_node_i2c_error
  MVirtualResourceGroup hwres_i2c_sda
  MVirtualResourceGroup hwres_i2c_scl
  
  MVirtualResourceGroup hwres_tx_dma_channel
  MVirtualResourceGroup hwres_rx_dma_channel
  MVirtualResourceGroup hwres_tx_dma_dlr
  MVirtualResourceGroup hwres_rx_dma_dlr
  
  MVirtualSignal vs_dma_interrupt_tx             /*Signal representing the DMA transfer complete interrupt*/
  MVirtualSignal vs_dma_interrupt_rx             /*Signal representing the DMA reception complete interrupt*/
  MVirtualSignal vs_src_trigger_dlr_rx_in        /*Signal representing DLR connection for DMA receive trigger*/
  MVirtualSignal vs_dst_trigger_dlr_tx_in        /*Signal representing DLR connection for DMA transmit trigger*/
  MVirtualSignal vs_src_trigger_dlr_rx_out       /*Signal output from the DLR to be connected to the DMA channel*/
  MVirtualSignal vs_dst_trigger_dlr_tx_out       /*Signal output from the DLR to be connected to the DMA channel*/
  MVirtualSignal vs_dma_ch_dst_req_tx            /*Signal representing DMA channel destination peripheral request (tx)*/
  MVirtualSignal vs_dma_ch_src_req_rx            /*Signal representing DMA channel source peripheral request (rx)*/
  MVirtualSignalRA vsra_gpdma_interrupt          /*Virtual signal from the GLOBAL_DMA APP for transmit mode*/
 
  
  MVirtualSignal vs_i2c_sdapad
  MVirtualSignal vs_i2c_sclpad
  MVirtualSignal vs_i2c_dout0
  MVirtualSignal vs_i2c_dx0ins
  MVirtualSignal vs_i2c_sclk
  MVirtualSignal vs_i2c_dx1ins
  
  MVirtualSignal vs_i2c_std_tx_int
  MVirtualSignal vs_i2c_std_rx_int
  MVirtualSignal vs_i2c_alt_rx_int
 
  MVirtualSignal vs_i2c_fifo_tx_int
  MVirtualSignal vs_i2c_fifo_rx_int
  MVirtualSignal vs_i2c_fifo_alt_rx_int
 
  MVirtualSignal vs_i2c_proto_specfic_int
  
  MVirtualSignal vs_i2c_tx_int
  MVirtualSignal vs_i2c_rx_int
  MVirtualSignal vs_i2c_error_int
  
  MRequiredApp appres_clock
  MRequiredApp appres_cpu
  MRequiredApp appres_global_dma
 
  
  SolverVariable sv_dma_modules = SolverVariable()  /*Solver variable with the list of DMA modules DMA0 and DMA1*/
  
	/* End   : User APP property section */

	/* APP Constructor */
	public I2C_SLAVE(DaveEnv daveEnv) {
    String family = daveEnv.project.selectedDevice.deviceId.family
    String series = daveEnv.project.selectedDevice.deviceId.series
    String fn_regexp = ~/^[^\d\W]\w*\Z/
    
    MF is_irq_used   = MF({((gcombo_transmit_mode.value == "Interrupt") || (gcombo_receive_mode.value == "Interrupt") || (gcheck_error_callback.value || gcheck_read_request.value))},Boolean)
    MF is_txfifo_enabled = MF({((gcheck_enable_txfifo.value) && (gcombo_transmit_mode.value != "DMA"))},Boolean)
    MF is_rxfifo_enabled = MF({((gcheck_enable_rxfifo.value) && (gcombo_receive_mode.value != "DMA"))},Boolean)
    MF is_txfifo_disabled = MF({((gcheck_enable_txfifo.value == false) || (gcombo_transmit_mode.value == "DMA"))},Boolean)
    MF is_rxfifo_disabled = MF({((gcheck_enable_rxfifo.value == false) || (gcombo_receive_mode.value == "DMA"))},Boolean)
    MF is_DMA_used   = MF({((gcombo_transmit_mode.value == "DMA") || (gcombo_receive_mode.value == "DMA"))},Boolean)
    MF is_txDMA_used = MF({gcombo_transmit_mode.value == "DMA"},Boolean)
    MF is_rxDMA_used = MF({gcombo_receive_mode.value == "DMA"},Boolean)
    MF is_pin_config_enabled = MF({gcheck_enable_advanced_config.value},Boolean)
    /*Get the list of pad driver speed classes based on UI selection*/
    MF sda_speed_class = MF({
                          if (gcombo_sda_strength.value == "Weak Driver" || gcombo_sda_strength.value == "Medium Driver" ||
                              gcombo_sda_strength.value == "Don't Care") {
                             ['A1', 'A1+', 'A2']
                          }
                          else if (gcombo_sda_strength.value == "Strong Driver Slow Edge") {
                             ['A1+']
                          }
                          else if (gcombo_sda_strength.value == "Strong Driver Soft Edge") {
                             ['A1+', 'A2']
                          }
                          else {
                             ['A2']
                          }
                        }, List)
    
    if(family == 'XMC4')
    {
      appres_clock = MRequiredApp("CLOCK_XMC4", "CLOCK_XMC4", RSHARABLE, "4.0.2")
      gfloat_peripheralclock.value = MF({appres_clock.getVal(["gfloat_peribusfreq", "value"])}, Float)
      appres_cpu = MRequiredApp("CPU_CTRL_XMC4", "CPU APP", RSHARABLE, "4.0.2")
      // consume GLOBAL_DMA APP if DMA mode is selected for tx / rx
      appres_global_dma = MRequiredApp("GLOBAL_DMA","GLOBAL_DMA",RSHARABLE, "4.0.2", is_DMA_used)
      /*DMA mode is available in XMC4x devices*/
      gcombo_transmit_mode.options = ["Interrupt","DMA","Direct"]
      gcombo_receive_mode.options = ["Interrupt","DMA","Direct"]
   
      /*Make interrupt subpriority configuration visible*/
      ginterruptprio_tx_interrupt.subPriorityVisible = true
      ginterruptprio_rx_interrupt.subPriorityVisible = true
      ginterruptprio_protocol.subPriorityVisible = true
      /*Set the default priority value to least priority*/
      ginterruptprio_tx_interrupt.priorityValue = 63
      ginterruptprio_rx_interrupt.priorityValue = 63
      ginterruptprio_protocol.priorityValue = 63
      MF max_subpriority = MF({
        if((gcombo_transmit_mode.value == "Interrupt") || (gcombo_receive_mode.value == "Interrupt") || (gcheck_error_callback.value || gcheck_read_request.value))
        {
          return appres_cpu.getVal(["gint_maxInterruptSubPriority", "value"])
        }
        else
        {
          return 0
        }
      }, Integer)
      ginterruptprio_tx_interrupt.maxSubPriority = max_subpriority
      ginterruptprio_rx_interrupt.maxSubPriority = max_subpriority
      ginterruptprio_protocol.maxSubPriority = max_subpriority
      MF max_priority = MF({
        if((gcombo_transmit_mode.value == "Interrupt") || (gcombo_receive_mode.value == "Interrupt") || (gcheck_error_callback.value || gcheck_read_request.value))
        {
          return appres_cpu.getVal(["gint_maxInterruptPreemptPriority", "value"])
        }
        else
        {
          return 63
        }
      }, Integer)
      ginterruptprio_tx_interrupt.maxPriority = max_priority
      ginterruptprio_rx_interrupt.maxPriority = max_priority
      ginterruptprio_protocol.maxPriority = max_priority
      glabel_scl_strength.visible = false
      gcombo_scl_strength.visible = false
      glabel_sda_strength.visible = true
      gcombo_sda_strength.visible = true
    }
    else if(family == 'XMC1')
    {
      appres_clock = MRequiredApp("CLOCK_XMC1", "CLOCK_XMC1", RSHARABLE, "4.0.2")
      gfloat_peripheralclock.value = MF({appres_clock.getVal(["gfloat_mclkactfrq", "value"])}, Float)
      appres_cpu = MRequiredApp("CPU_CTRL_XMC1", "CPU APP", RSHARABLE, "4.0.2")
      /*DMA mode is not available in XMC1x devices*/
      gcombo_transmit_mode.options = ["Interrupt","Direct"]
      gcombo_receive_mode.options = ["Interrupt","Direct"]
      ginterruptprio_tx_interrupt.subPriorityVisible = false
      ginterruptprio_rx_interrupt.subPriorityVisible = false
      ginterruptprio_protocol.subPriorityVisible = false
      /*Set the default priority and max priority value possible*/
      ginterruptprio_tx_interrupt.priorityValue = 3
      ginterruptprio_tx_interrupt.maxPriority = 3
      ginterruptprio_rx_interrupt.priorityValue = 3
      ginterruptprio_rx_interrupt.maxPriority = 3
      ginterruptprio_protocol.priorityValue = 3
      ginterruptprio_protocol.maxPriority = 3
      glabel_scl_strength.visible = true
      gcombo_scl_strength.visible = true
      glabel_sda_strength.visible = false
      gcombo_sda_strength.visible = false
    }
    
    /* -------------- Hardware resource consumption -------------------------------- */
    hwres_i2c_sda = MVirtualResourceGroup("SDA",["port","p","*","pad","*"])
    hwres_i2c_scl = MVirtualResourceGroup("SCL",["port","p","*","pad","*"])
    
    hwres_usic_channel =  MVirtualResourceGroup("Channel", ["peripheral", "usic", "*", "channel", "*"])
    
    /* consume NVIC nodes */
    hwres_nvic_node_i2c_tx = MVirtualResourceGroup("NVIC Node Tx", ["peripheral", "cpu", "0", "nvic", "interrupt", "*"], MF({
                                     (gcombo_transmit_mode.value == "Interrupt")},Boolean))
    hwres_nvic_node_i2c_rx = MVirtualResourceGroup("NVIC Node Rx", ["peripheral", "cpu", "0", "nvic", "interrupt", "*"], MF({
                                     (gcombo_receive_mode.value == "Interrupt")},Boolean))
    hwres_nvic_node_i2c_error = MVirtualResourceGroup("NVIC Node Error", ["peripheral", "cpu", "0", "nvic", "interrupt", "*"], MF({
                                     (gcheck_error_callback.value) || (gcheck_read_request.value)},Boolean))
    
    hwres_tx_dma_channel = MVirtualResourceGroup("DMA channel Tx", ["peripheral", sv_dma_modules, "0", "ch", "*"], is_txDMA_used)
    hwres_rx_dma_channel = MVirtualResourceGroup("DMA channel Rx", ["peripheral", sv_dma_modules, "0", "ch", "*"], is_rxDMA_used)
    hwres_tx_dma_dlr = MVirtualResourceGroup("DLR channel Tx", ["peripheral", "dlr", "0", "ch", "*"], is_txDMA_used)
    hwres_rx_dma_dlr = MVirtualResourceGroup("DLR channel Rx", ["peripheral", "dlr", "0", "ch", "*"], is_rxDMA_used)
    
    addRegisterBitFieldConstraint( hwres_usic_channel, "tbctr_size", MF({[0]}, List), is_txfifo_disabled)
    addRegisterBitFieldConstraint( hwres_usic_channel, "rbctr_size", MF({[0]}, List), is_rxfifo_disabled)
    addRegisterBitFieldConstraint( hwres_usic_channel, "tbctr_size", MF({[gcombo_txfifo_size.options.indexOf(gcombo_txfifo_size.value) + 1]}, List), is_txfifo_enabled)
    addRegisterBitFieldConstraint( hwres_usic_channel, "rbctr_size", MF({[gcombo_rxfifo_size.options.indexOf(gcombo_rxfifo_size.value) + 1]}, List), is_rxfifo_enabled)
    
    if(family == 'XMC4')
    {
    addResourcePropertyConstraint(hwres_i2c_sda, "speed_class of rg_property", sda_speed_class, is_pin_config_enabled)
    }
    
    if((family+series == 'XMC45') || (family+series == 'XMC47') || (family+series == 'XMC48'))
    {
      addUriElementRangeConstraint(sv_dma_modules, ["dma8", "dma4"])
    }
    else
    {
      addUriElementRangeConstraint(sv_dma_modules, ["dma8"])
    }
    
    /* -------------- APP IO Signals -------------------------------- */
    @AddPin
    vs_i2c_sdapad = MVirtualSignal(hwres_i2c_sda,"sda_pin","pad",true,true)
    
    @AddPin
    vs_i2c_sclpad = MVirtualSignal(hwres_i2c_scl,"scl_pin","pad",true,true)
    
    vs_i2c_dout0  = MVirtualSignal(hwres_usic_channel, "tx pin", "dout0", true, false)
    vs_i2c_dx0ins = MVirtualSignal(hwres_usic_channel, "rx pin", "dx0ins", true, false)
	vs_i2c_sclk   = MVirtualSignal(hwres_usic_channel, "sclk pin", "sclkout", true, false)
    vs_i2c_dx1ins = MVirtualSignal(hwres_usic_channel, "clockin", "dx1ins", true, false)

    vs_i2c_tx_int        =  MVirtualSignal( hwres_nvic_node_i2c_tx, "sr_transmit", "signal_in", MF({
                                            (gcombo_transmit_mode.value == "Interrupt")},Boolean), false)
    vs_i2c_rx_int        =  MVirtualSignal( hwres_nvic_node_i2c_rx, "sr_receive", "signal_in", MF({
                                            (gcombo_receive_mode.value == "Interrupt")},Boolean), false)
    vs_i2c_error_int     =  MVirtualSignal( hwres_nvic_node_i2c_error, "sr_protocol_events", "signal_in", MF({
                                            gcheck_error_callback.value || gcheck_read_request.value},Boolean), false)
    
    /* If Direct mode is selected, the signals are exposed externally.  */
    vs_i2c_std_tx_int        =  MVirtualSignal( hwres_usic_channel, "event_transmit_buffer","transmit_buffer_int", is_txfifo_disabled, MF({(gcombo_transmit_mode.value == "Direct")}, Boolean))
    vs_i2c_std_rx_int        =  MVirtualSignal( hwres_usic_channel, "event_std_receive", "standard_receive_int", is_rxfifo_disabled, MF({(gcombo_receive_mode.value == "Direct")}, Boolean))
    vs_i2c_alt_rx_int        =  MVirtualSignal( hwres_usic_channel, "event_alt_receive",  "alternate_receive_int", is_rxfifo_disabled, MF({(gcombo_receive_mode.value == "Direct")}, Boolean))
 
    vs_i2c_fifo_tx_int       =  MVirtualSignal( hwres_usic_channel, "event_fifo_transmit","standard_transmit_buffer_int", is_txfifo_enabled, MF({(gcombo_transmit_mode.value == "Direct")}, Boolean))
    vs_i2c_fifo_rx_int       =  MVirtualSignal( hwres_usic_channel, "event_fifo_std_receive", "standard_receive_buffer_int", is_rxfifo_enabled, MF({(gcombo_receive_mode.value == "Direct")}, Boolean))
    vs_i2c_fifo_alt_rx_int   =  MVirtualSignal( hwres_usic_channel, "event_fifo_alt_receive", "alternate_receive_buffer_int", is_rxfifo_enabled, MF({(gcombo_receive_mode.value == "Direct")}, Boolean))
    
    vs_i2c_proto_specfic_int =  MVirtualSignal( hwres_usic_channel, "event_protocol", "protocol_specific_int", true, MF({(gcheck_error_callback.value == false) && (gcheck_read_request.value == false)},Boolean))
    
    if(family == 'XMC4')
    {
      vs_dma_interrupt_tx       =  MVirtualSignal( hwres_tx_dma_channel, "DMA Transfer complete event", "dma_int", is_txDMA_used, false)
      vs_dma_interrupt_rx       =  MVirtualSignal( hwres_rx_dma_channel, "DMA Transfer complete event", "dma_int", is_rxDMA_used, false)
      vs_src_trigger_dlr_rx_in  =  MVirtualSignal( hwres_rx_dma_dlr, "source_trigger","in", is_rxDMA_used, false)
      vs_dst_trigger_dlr_tx_in  =  MVirtualSignal( hwres_tx_dma_dlr, "destination_trigger","in", is_txDMA_used, false)
      vs_src_trigger_dlr_rx_out =  MVirtualSignal( hwres_rx_dma_dlr, "dlr_out", "out", is_rxDMA_used, false)
      vs_dst_trigger_dlr_tx_out =  MVirtualSignal( hwres_tx_dma_dlr, "dlr_out", "out", is_txDMA_used, false)
      vs_dma_ch_dst_req_tx      =  MVirtualSignal( hwres_tx_dma_channel, "Destination request", "dest_req", is_txDMA_used, false)
      vs_dma_ch_src_req_rx      =  MVirtualSignal( hwres_rx_dma_channel, "Source request", "src_req", is_rxDMA_used, false)
      vsra_gpdma_interrupt      =  MVirtualSignalRA( appres_global_dma, "interrupt_dma")
    }
    /* ---------------- APP IO Connections -------------------------- */
    addConnectionConstraint( vs_i2c_dout0, vs_i2c_sdapad)
    addConnectionConstraint( vs_i2c_sdapad, vs_i2c_dx0ins)
	addConnectionConstraint(vs_i2c_sclk, vs_i2c_sclpad)
    addConnectionConstraint( vs_i2c_sclpad, vs_i2c_dx1ins)
    
    /* Connect standard transmit interrupt to transmit interrupt */
    addConnectionConstraint(vs_i2c_std_tx_int, vs_i2c_tx_int, MF({(gcombo_transmit_mode.value == "Interrupt")&& (gcheck_enable_txfifo.value == false)},Boolean))
    
    /* Connect standard receive interrupt to receive interrupt */
    addConnectionConstraint(vs_i2c_std_rx_int, vs_i2c_rx_int, MF({(gcombo_receive_mode.value == "Interrupt")&& (gcheck_enable_rxfifo.value == false)},Boolean))
    
    /* Connect alternate receive interrupt to receive interrupt */
    addConnectionConstraint(vs_i2c_alt_rx_int, vs_i2c_rx_int, MF({(gcombo_receive_mode.value == "Interrupt")&& (gcheck_enable_rxfifo.value == false)},Boolean))
    
    /* Connect FIFO transmit interrupt to transmit interrupt */
    addConnectionConstraint(vs_i2c_fifo_tx_int, vs_i2c_tx_int, MF({(gcombo_transmit_mode.value == "Interrupt")&& (gcheck_enable_txfifo.value)},Boolean))
    
    /* Connect FIFO receive interrupt to receive interrupt */
    addConnectionConstraint(vs_i2c_fifo_rx_int, vs_i2c_rx_int, MF({(gcombo_receive_mode.value == "Interrupt")&& (gcheck_enable_rxfifo.value)},Boolean))
    
    /* Connect FIFO alternate receive interrupt to receive interrupt */
    addConnectionConstraint(vs_i2c_fifo_alt_rx_int, vs_i2c_rx_int, MF({(gcombo_receive_mode.value == "Interrupt")&& (gcheck_enable_rxfifo.value)},Boolean))
    
    /* Connect protocol specific interrupt to error interrupt */
    addConnectionConstraint(vs_i2c_proto_specfic_int, vs_i2c_error_int,  MF({(gcheck_error_callback.value || gcheck_read_request.value)},Boolean))
    
	if(family == 'XMC4')
	{
	    addConnectionConstraint(vs_i2c_std_tx_int, vs_dst_trigger_dlr_tx_in, is_txDMA_used)
	    addConnectionConstraint(vs_dma_interrupt_tx, vsra_gpdma_interrupt, is_txDMA_used)
	    addConnectionConstraint(vs_dma_interrupt_rx, vsra_gpdma_interrupt, is_rxDMA_used)
	    addConnectionConstraint(vs_dst_trigger_dlr_tx_out, vs_dma_ch_dst_req_tx, is_txDMA_used)
	    addConnectionConstraint(vs_i2c_std_rx_int, vs_src_trigger_dlr_rx_in, is_rxDMA_used)
	    addConnectionConstraint(vs_i2c_alt_rx_int, vs_src_trigger_dlr_rx_in, is_rxDMA_used)
	    addConnectionConstraint(vs_src_trigger_dlr_rx_out, vs_dma_ch_src_req_rx, is_rxDMA_used)
	}
    
    ggroup_transmit.enabled = MF({(gcombo_transmit_mode.value != "Direct")},Boolean)
    ginterruptprio_tx_interrupt.enabled = MF({ggroup_transmit.enabled},Boolean)
    gcheck_tx_callback.enabled = MF({ggroup_transmit.enabled},Boolean)
    gstring_tx_callback.enabled = MF({(ggroup_transmit.enabled && gcheck_tx_callback.value)},Boolean)
    gmessage_end_tx.enabled = MF({ggroup_transmit.enabled},Boolean)
    
    ggroup_receive.enabled = MF({(gcombo_receive_mode.value != "Direct")},Boolean)
    ginterruptprio_rx_interrupt.enabled = MF({ggroup_receive.enabled},Boolean)
    gcheck_rx_callback.enabled = MF({ggroup_receive.enabled},Boolean)
    gstring_rx_callback.enabled = MF({(ggroup_receive.enabled && gcheck_rx_callback.value)},Boolean)
    gmessage_end_rx.enabled = MF({ggroup_receive.enabled},Boolean)
    
    gstring_read_request.enabled = MF({gcheck_read_request.value},Boolean)
    gstring_error_callback.enabled = MF({gcheck_error_callback.value},Boolean)
    
    gcheck_enable_txfifo.enabled = MF({(gcombo_transmit_mode.value != "DMA")},Boolean)
    glabel_txfifo_size.enabled = is_txfifo_enabled
    gcombo_txfifo_size.enabled = is_txfifo_enabled
    gcheck_enable_rxfifo.enabled = MF({(gcombo_receive_mode.value != "DMA")},Boolean)
    glabel_rxfifo_size.enabled = is_rxfifo_enabled
    gcombo_rxfifo_size.enabled = is_rxfifo_enabled
    glabel_fifo_note.enabled = MF({(gcheck_enable_txfifo.enabled)||(gcheck_enable_rxfifo.enabled)},Boolean)
    
    ggroup_sda.visible = is_pin_config_enabled
    ggroup_scl.visible = is_pin_config_enabled
    gmessage_end_tx.visible = MF({
      Matcher matcher_tx = (gstring_tx_callback.value =~ fn_regexp)
      Boolean ExpressionMatch_tx = !matcher_tx.matches()
      if(gcheck_tx_callback.value && gcheck_tx_callback.enabled){ return ExpressionMatch_tx} else{ return false}
    },Boolean)
    gmessage_end_rx.visible = MF({
      Matcher matcher_tx = (gstring_rx_callback.value =~ fn_regexp)
      Boolean ExpressionMatch_tx = !matcher_tx.matches()
      if(gcheck_rx_callback.value && gcheck_rx_callback.enabled){ return ExpressionMatch_tx} else{ return false}
    },Boolean)
    gmessage_read_request.visible = MF({
      Matcher matcher_tx = (gstring_read_request.value =~ fn_regexp)
      Boolean ExpressionMatch_tx = !matcher_tx.matches()
      if(gcheck_read_request.value == true){ return ExpressionMatch_tx} else{ return false}
    },Boolean)
    gmessage_error_detected.visible = MF({
      Matcher matcher_tx = (gstring_error_callback.value =~ fn_regexp)
      Boolean ExpressionMatch_tx = !matcher_tx.matches()
      if(gcheck_error_callback.value == true){ return ExpressionMatch_tx} else{ return false}
    },Boolean)
    
    ginteger_address.maxValue = MF({if(gcombo_address_mode.value == "7") return 255 else return 1023},Integer)
    
	}
	
	// File Generation
	def generateFiles(){
   copy("i2c_slave.c", "i2c_slave.c")
   copy("i2c_slave.h", "i2c_slave.h")
   generate("i2c_slave_confc.tmpl", "i2c_slave_conf.c")
   generate("i2c_slave_confh.tmpl", "i2c_slave_conf.h")
   generate("i2c_slave_externh.tmpl", "i2c_slave_extern.h")
	}
	
	/**
	 * Add main code here
	 */
}
