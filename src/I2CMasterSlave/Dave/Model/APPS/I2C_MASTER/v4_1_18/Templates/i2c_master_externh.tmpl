package Model.APPS.I2C_MASTER.v4_1_18.Templates;

import Model.APPS.I2C_MASTER.v4_1_18.I2C_MASTER

out.print("""
/**
 * @cond
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015-2016, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-02-16:
 *     - Initial version<br>
 *
 * @endcond
 *
 */
/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/
 
#ifndef I2C_MASTER_EXTERN_H
#define I2C_MASTER_EXTERN_H

#ifdef __cplusplus
extern "C" {
#endif

/**********************************************************************************************************************
 * MACROS
 **********************************************************************************************************************/
""");
List TxInterrupt_Uri = null
List RxInterrupt_Uri = null
List ErrInterrupt_Uri = null
String Tx_node = null
String Rx_node = null
String Err_node = null
String flag = false

for (Object i2cInst : appInstancesList ) 
{
if(i2cInst.gcombo_tx_mode.value == "Interrupt")
{	
	TxInterrupt_Uri = i2cInst.hwres_nvic_node_i2c_tx.getSolverUri();
	Tx_node = TxInterrupt_Uri[-1]
out.print("""
#define ${i2cInst.getInstanceLabel()}_TX_HANDLER	IRQ_Hdlr_${Tx_node}""");
}
if(i2cInst.gcombo_rx_mode.value == "Interrupt")
{	
	RxInterrupt_Uri = i2cInst.hwres_nvic_node_i2c_rx.getSolverUri();
	Rx_node = RxInterrupt_Uri[-1]
	out.print("""\n
#define ${i2cInst.getInstanceLabel()}_RX_HANDLER	IRQ_Hdlr_${Rx_node}""");
}
if((i2cInst.gcheck_nack.value == true) || (i2cInst.gcheck_arbitration.value == true) || (i2cInst.gcheck_error.value == true))
{
	if(i2cInst.gcombo_tx_mode.value == "Direct")
	{
	ErrInterrupt_Uri = i2cInst.hwres_nvic_node_i2c_error.getSolverUri();
	Err_node = ErrInterrupt_Uri[-1]
	out.print("""\n
#define ${i2cInst.getInstanceLabel()}_ERR_HANDLER	IRQ_Hdlr_${Err_node}""");
	}
}
	appInst = i2cInst.getInstanceLabel()
	out.print("""\n
extern I2C_MASTER_t ${i2cInst.getInstanceLabel()};""");

if((i2cInst.gcheck_end_of_tx_callback.value == true) && (i2cInst.gstring_end_of_tx_callback.value != ""))
{
out.print("""
extern void ${i2cInst.gstring_end_of_tx_callback.value}(void);
""");
}
if((i2cInst.gcheck_end_of_rx_callback.value == true) && (i2cInst.gstring_end_of_rx_callback.value != ""))
{
out.print("""
extern void ${i2cInst.gstring_end_of_rx_callback.value}(void);
""");
}

if((i2cInst.gcheck_nack.value == true) && (i2cInst.gstring_nack.value != ""))
{
out.print("""
extern void ${i2cInst.gstring_nack.value}(void);
""");
}
if((i2cInst.gcheck_arbitration.value ==  true) && (i2cInst.gstring_arbitration.value != ""))
{
out.print("""
extern void ${i2cInst.gstring_arbitration.value}(void);
""");
}
if((i2cInst.gcheck_error.value == true) && (i2cInst.gstring_error.value != ""))
{
out.print("""
extern void ${i2cInst.gstring_error.value}(void);
""");
} 

}
out.print("""
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);""");
out.print("""
#ifdef __cplusplus
}
#endif                     

#endif  /* ifndef I2C_MASTER_EXTERN_H */

""");
