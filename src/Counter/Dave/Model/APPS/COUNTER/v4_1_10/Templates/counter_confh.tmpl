package Model.APPS.COUNTER.v4_1_10.Templates;

import Model.APPS.COUNTER.v4_1_10.COUNTER

out.print("""
/**
 * @cond
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015-2016, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-02-16:
 *     - Initial version for DAVEv4.<BR>
 *
 * 2015-04-06:
 *     - Modified the config structure of the COUNTER.<BR>
 *     - Enables usage of external event-2 for gating.<BR>
 *     - UI modified to support the edge selection for Count Direction and Gating.<BR>
 *     - API name change COUNTER_AcknowledgeInterrupt to COUNTER_ClearEvent.<BR>
 *
 * 2015-07-09:
 *     - Documentation updated.<BR>
 *
 * 2015-09-01:
 *     - XMC14 device support added..<BR>
 *
 * 2015-10-08:
 *     - Added support for XMC4700/XMC4800 devices.<BR>
 *
 * 2015-12-16:
 *     - Added support for XMC4300 devices.<BR>
 *
 * 2016-07-08:
 *     - Fixed incorrect case for an included header.<br>
 *     - All event signals are made mandatory.<BR>
 *
 * @endcond
 *
 */

#ifndef COUNTER_CONF_H
#define COUNTER_CONF_H

/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/
""");

List MappedSrcNvicUri   = null;
String Offsetsrc = null;
String appInst  = null;
int InstancesNum = 0;

/*********************************************************************************************/
/* To find out which types of peripheral are consumed by the counter instances*/
   int CCU4_counter=0;
   int CCU8_counter=0;
   
   for (Object appIns : appInstancesList ) {
	 
   if(appIns.gcombo_peripheral_selection.value == "CCU4")
   {
	   CCU4_counter = 1;
   }
   if(appIns.gcombo_peripheral_selection.value == "CCU8")
   {
		   CCU8_counter = 1;
   }
  }
   if(CCU4_counter == 1)
   {
	   out.print("""
#include "GLOBAL_CCU4/global_ccu4.h"
#include "xmc_ccu4.h"
""");
   }
   
   if(CCU8_counter == 1)
   {
	   out.print("""
#include "GLOBAL_CCU8/global_ccu8.h"
#include "xmc_ccu8.h"
""");
   }
   
out.print("""
/**********************************************************************************************************************
 * MACROS
 **********************************************************************************************************************/
"""); 
if(CCU4_counter == 1)
{
	out.print("""
#define COUNTER_CCU4_USED
""");
}

if(CCU8_counter == 1)
{
	out.print("""
#define COUNTER_CCU8_USED
""");
}
/* Retrieve user defined handler name for all the instances
* and assign the IRQ handler based on offset */
for (Object appIns : appInstancesList ) {
	appInst = appIns.getInstanceLabel()

	if(appIns.gcombo_peripheral_selection.value == "CCU4")
	{
		MappedUri = appIns.hwres_ccu4_slice.getSolverUri()
		 out.print("""
#define ${appInst}_KERNEL_PTR ((XMC_CCU4_MODULE_t*) (void*) CCU4${MappedUri[4]}_BASE)
#define ${appInst}_SLICE_PTR ((XMC_CCU4_SLICE_t*) (void*) CCU4${MappedUri[4]}_CC4${MappedUri[6]})
#define ${appInst}_SLICE_SH_MSK  XMC_CCU4_SHADOW_TRANSFER_SLICE_${MappedUri[6]}
""")
	}
	if(appIns.gcombo_peripheral_selection.value == "CCU8")
	{
		MappedUri = appIns.hwres_ccu8_slice.getSolverUri()
			 out.print("""
#define ${appInst}_KERNEL_PTR ((XMC_CCU8_MODULE_t*) (void*) CCU8${MappedUri[4]}_BASE)
#define ${appInst}_SLICE_PTR ((XMC_CCU8_SLICE_t*) (void*) CCU8${MappedUri[4]}_CC8${MappedUri[6]})
#define ${appInst}_SLICE_SH_MSK  XMC_CCU8_SHADOW_TRANSFER_SLICE_${MappedUri[6]}
""")
	}
 

 

InstancesNum++;
}

out.print("""
/*Macro specifying the number of NVIC handles */
#define COUNTER_NUM_APPINSTANCES   (${InstancesNum}U)
""");

out.print("""
#define COUNTER_MAJOR_VERSION (${COUNTER.version.split("\\.")[0]}) /**< Major version number of COUNTER APP*/
#define COUNTER_MINOR_VERSION (${COUNTER.version.split("\\.")[1]}) /**< Minor version number of COUNTER APP*/
#define COUNTER_PATCH_VERSION (${COUNTER.version.split("\\.")[2]}) /**< Patch version number of COUNTER APP*/
""");


out.print("""
  
#endif /* COUNTER_CONFH */

/*CODE_BLOCK_END*/
""");